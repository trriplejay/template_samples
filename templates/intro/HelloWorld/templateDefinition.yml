###
## Hello World
# This pipeline is designed to showcase some basic JFrog Pipelines functionality
###
# resources usually represent static artifacts or configurations. In
# this example we're using a simple "PropertyBag" to hold some
# key value pairs.  Resources can be referenced when they are inputs
# to steps, and they can even be updated when they are outputs from steps.
##
resources:
  - name: {{ .Values.namePrefix }}_bag
    type: PropertyBag
    configuration:
      releaseVersion: ""

{{ if .Values.repo.integrationName }}
  - name: {{ .Values.namePrefix }}_repo
    type: GitRepo
    configuration:
      path: {{ .Values.repo.path }}
      gitProvider: {{ .Values.repo.integrationName }}
      branches:
        include: {{ .Values.repo.branchPattern }}
{{ end }}

pipelines:
  - name: {{ .Values.namePrefix }}_hello_world
    configuration:
      jfrogCliVersion: 2
    steps:
      - name: first_step
        type: Bash
        {{ if .Values.repo.integrationName }}
        configuration:
          inputResources:
            - name: {{ .Values.namePrefix }}_repo
        {{ end }}
        execution:
          onStart:
            - echo "onStart can be used to do some setup or initialization of your dependencies to prepare for the execution."
          onExecute:
            - echo "onExecute is the main section where you would issue your build/test commands"
            - jfrog --version
          onSuccess:
            - echo "onSuccess executes if the onStart or onExecute sections completed without errors"
          onFailure:
            - echo "onFailure executes if either onStart or onExecute end in failure or error."
          onComplete:
            - echo "onComplete executes after onSuccess or onFailure"

      - name: variable_selection_step
        type: Bash
        configuration:
          inputSteps:
            - name: first_step
          environmentVariables:
            forceFail:
              default: "false"
              description: "set to 'true' to force the step to fail."
              values:
                - "false"
                - "true"
        execution:
          onStart:
            - if [ ${forceFail} == "true" ]; then exit 1; fi
          onExecute:
            - echo "This step will succeed"
          onFailure:
            - echo "step has failed."
          onSuccess:
            - echo "step has succeeded."
          onComplete:
            - echo "onComplete executes regardless of success or failure. forceFail is ${forceFail}"

      - name: run_variable_step
        type: Bash
        configuration:
          inputSteps:
            - name: first_step
        execution:
          onStart:
            - echo "This step will write to a value to a run variable, and add a file to the affinity group shared space."
          onExecute:
            - add_run_variables step_info="runNumber $run_number, step_name $step_name, pipeline_name $pipeline_name"

      - name: verify_details_step
        type: Bash
        configuration:
          inputSteps:
            - name: run_variable_step
            - name: variable_selection_step
          outputResources:
            - name: {{ .Values.namePrefix }}_bag
        execution:
          onStart:
            - echo "Printing step_info from previous step"
            - echo "${step_info}"
          onExecute:
            - echo "Updating resource {{ .Values.namePrefix }}_bag with new key/value pairs"
            - write_output {{ .Values.namePrefix }}_bag "timestamp=$(date +%s)"
            - write_output {{ .Values.namePrefix }}_bag "releaseVersion=${pipeline_name}.${run_number}"
            - write_output {{ .Values.namePrefix }}_bag "stepInfo=${step_info}"

      - name: final_step
        type: Bash
        configuration:
          inputResources:
            - name: {{ .Values.namePrefix }}_bag
        execution:
          onExecute:
            - echo "Printing step_info from previous step"
            - echo "${step_info}"
            - echo "printing resource details"
            - echo "Release Version is -- ${res_{{ .Values.namePrefix }}_bag_releaseVersion}"
            - echo "Release timestamp is -- ${res_{{ .Values.namePrefix }}_bag_timestamp}"
            - echo "Step Info is -- ${res_{{ .Values.namePrefix }}_bag_stepInfo}"


